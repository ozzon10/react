[{"D:\\react\\confusion\\src\\index.js":"1","D:\\react\\confusion\\src\\App.js":"2","D:\\react\\confusion\\src\\reportWebVitals.js":"3","D:\\react\\confusion\\src\\components\\MenuComponent.js":"4","D:\\react\\confusion\\src\\shared\\dishes.js":"5","D:\\react\\confusion\\src\\components\\DishdetailComponent.js":"6","D:\\react\\confusion\\src\\components\\MainComponent.js":"7","D:\\react\\confusion\\src\\components\\HeaderComponent.js":"8","D:\\react\\confusion\\src\\components\\FooterComponent.js":"9","D:\\react\\confusion\\src\\components\\HomeComponent.js":"10","D:\\react\\confusion\\src\\components\\ContactComponent.js":"11","D:\\react\\confusion\\src\\shared\\leaders.js":"12","D:\\react\\confusion\\src\\shared\\promotions.js":"13","D:\\react\\confusion\\src\\components\\AboutComponent.js":"14","D:\\react\\confusion\\src\\redux\\configureStore.js":"15","D:\\react\\confusion\\src\\components\\CommentForm.js":"16","D:\\react\\confusion\\src\\redux\\dishes.js":"17","D:\\react\\confusion\\src\\redux\\leaders.js":"18","D:\\react\\confusion\\src\\redux\\promotions.js":"19","D:\\react\\confusion\\src\\redux\\comments.js":"20","D:\\react\\confusion\\src\\shared\\comments.js":"21","D:\\react\\confusion\\src\\redux\\ActionCreators.js":"22","D:\\react\\confusion\\src\\redux\\ActionTypes.js":"23","D:\\react\\confusion\\src\\components\\LoadingComponent.js":"24","D:\\react\\confusion\\src\\redux\\forms.js":"25","D:\\react\\confusion\\src\\shared\\baseUrl.js":"26"},{"size":639,"mtime":1610456217685,"results":"27","hashOfConfig":"28"},{"size":533,"mtime":1613888561406,"results":"29","hashOfConfig":"28"},{"size":362,"mtime":499162500000,"results":"30","hashOfConfig":"28"},{"size":2354,"mtime":1617083171570,"results":"31","hashOfConfig":"28"},{"size":1490,"mtime":1611322740005,"results":"32","hashOfConfig":"28"},{"size":6210,"mtime":1617288911212,"results":"33","hashOfConfig":"28"},{"size":3906,"mtime":1617338436606,"results":"34","hashOfConfig":"28"},{"size":5099,"mtime":1613225743115,"results":"35","hashOfConfig":"28"},{"size":2634,"mtime":1611232696103,"results":"36","hashOfConfig":"28"},{"size":2109,"mtime":1617333896141,"results":"37","hashOfConfig":"28"},{"size":11067,"mtime":1617338436606,"results":"38","hashOfConfig":"28"},{"size":2382,"mtime":1611322740014,"results":"39","hashOfConfig":"28"},{"size":445,"mtime":1611322739908,"results":"40","hashOfConfig":"28"},{"size":5358,"mtime":1617337678059,"results":"41","hashOfConfig":"28"},{"size":794,"mtime":1616838148320,"results":"42","hashOfConfig":"28"},{"size":4618,"mtime":1613922877982,"results":"43","hashOfConfig":"28"},{"size":598,"mtime":1614877399303,"results":"44","hashOfConfig":"28"},{"size":605,"mtime":1617333896141,"results":"45","hashOfConfig":"28"},{"size":628,"mtime":1617083349850,"results":"46","hashOfConfig":"28"},{"size":539,"mtime":1617117529192,"results":"47","hashOfConfig":"28"},{"size":4279,"mtime":1614179064190,"results":"48","hashOfConfig":"28"},{"size":6515,"mtime":1617338436606,"results":"49","hashOfConfig":"28"},{"size":609,"mtime":1617338436606,"results":"50","hashOfConfig":"28"},{"size":256,"mtime":1614876722395,"results":"51","hashOfConfig":"28"},{"size":170,"mtime":1616838138175,"results":"52","hashOfConfig":"28"},{"size":48,"mtime":1617083171591,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"166ewki",{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"56"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"93"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"56"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"D:\\react\\confusion\\src\\index.js",[],["115","116"],"D:\\react\\confusion\\src\\App.js",[],"D:\\react\\confusion\\src\\reportWebVitals.js",[],"D:\\react\\confusion\\src\\components\\MenuComponent.js",[],"D:\\react\\confusion\\src\\shared\\dishes.js",[],["117","118"],"D:\\react\\confusion\\src\\components\\DishdetailComponent.js",["119","120","121"],"import React, { Component } from 'react';\r\nimport { Card, CardImg, CardBody, CardTitle, CardText, Media, BreadcrumbItem, Breadcrumb } from \"reactstrap\";\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Modal, ModalHeader, ModalBody, Label, Row, Col } from 'reactstrap';\r\nimport { Control, LocalForm, Errors } from 'react-redux-form';\r\nimport { Loading } from './LoadingComponent';\r\nimport { baseUrl } from '../shared/baseUrl';\r\nimport { FadeTransform, Fade, Stagger } from 'react-animation-components';\r\n\r\nconst required = (val) => val && val.length;\r\nconst maxLength = (len) => (val) => !(val) || (val.length <= len);\r\nconst minLength = (len) => (val) => (val) && (val.length >= len);\r\n\r\nclass CommentForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isModalOpen: false\r\n    };\r\n    this.toggleModal = this.toggleModal.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleSubmit(values) {\r\n    this.props.postComment(this.props.dishId, values.rating, values.author, values.comment);\r\n  }\r\n\r\n  toggleModal() {\r\n    this.setState({\r\n      isModalOpen: !this.state.isModalOpen\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <Button outline onClick={this.toggleModal}>\r\n          <span className=\"fa fa-pencil fa-lg\"></span> Submit Comment\r\n                </Button>\r\n        <Modal isOpen={this.state.isModalOpen} toggle={this.toggleModal}>\r\n          <ModalHeader toggle={this.toggleModal}>Submit Comment</ModalHeader>\r\n          <ModalBody>\r\n            <LocalForm onSubmit={(values) => this.handleSubmit(values)}>\r\n              <Row class=\"form-group\">\r\n                <Label htmlFor=\"rating\" md={12}>Rating</Label>\r\n                <Col md={12}>\r\n                  <Control.select model=\".rating\"\r\n                    className=\"form-control\"\r\n                    name=\"rating\">\r\n                    <option>1</option>\r\n                    <option>2</option>\r\n                    <option>3</option>\r\n                    <option>4</option>\r\n                    <option>5</option>\r\n                  </Control.select>\r\n                </Col>\r\n              </Row>\r\n              <Row class=\"form-group\">\r\n                <Label htmlFor=\"author\" md={12}>Your Name</Label>\r\n                <Col md={12}>\r\n                  <Control.text model=\".author\" id=\"author\" name=\"author\"\r\n                    placeholder=\"Your Name\"\r\n                    className=\"form-control\"\r\n                    validators={{\r\n                      required, minLength: minLength(3), maxLength: maxLength(15)\r\n                    }}\r\n                  />\r\n                  <Errors\r\n                    className=\"text-danger\"\r\n                    model=\".author\"\r\n                    show=\"touched\"\r\n                    messages={{\r\n                      required: \"Required\",\r\n                      minLength: \"Must be greater than 2 characters\",\r\n                      maxLength: \"Must be 15 character or less\"\r\n                    }}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n              <Row className=\"form-group\">\r\n                <Label htmlFor=\"comment\" md={12}>Comment</Label>\r\n                <Col md={12}>\r\n                  <Control.textarea model=\".comment\" id=\"comment\" name=\"comment\"\r\n                    rows=\"6\"\r\n                    className=\"form-control\" />\r\n                </Col>\r\n              </Row>\r\n              <Row className=\"form-group\">\r\n                <Col md={{ size: 12 }}>\r\n                  <Button type=\"submit\" color=\"primary\">\r\n                    Submit\r\n                  </Button>\r\n                </Col>\r\n              </Row>\r\n            </LocalForm>\r\n          </ModalBody>\r\n        </Modal>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nfunction RenderComments({ comments, postComment, dishId }) {\r\n\r\n  const comment = comments.map((comment) => {\r\n    return (\r\n      <Fade in>\r\n      <div key={comment.id}>\r\n        <p>{comment.comment}</p>\r\n        <p>-- {comment.author}, {new Intl.DateTimeFormat('en-US', { year: 'numeric', month: 'short', day: '2-digit' }).format(new Date(Date.parse(comment.date)))}</p>\r\n      </div>\r\n      </Fade>\r\n    )\r\n  });\r\n\r\n  return (\r\n    <div className=\"col-12 col-md-5 m-1\">\r\n      <h4>Comments</h4>\r\n      <Media className=\"list-unstyled\" list>\r\n      <Stagger in>\r\n        {comment}\r\n      </Stagger>\r\n      </Media>\r\n      <CommentForm dishId={dishId} postComment={postComment} />\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction RenderDish({ dish }) {\r\n  return (\r\n    <div className=\"col-12 col-md-5 m-1\">\r\n      <FadeTransform\r\n        in\r\n        transformProps={{\r\n          exitTransform: 'scale(0.5) translateY(-50%)'\r\n        }}>\r\n        <Card>\r\n          <CardImg width=\"100%\" src={baseUrl + dish.image} alt={dish.name} />\r\n          <CardBody>\r\n            <CardTitle>{dish.name}</CardTitle>\r\n            <CardText>{dish.description}</CardText>\r\n          </CardBody>\r\n        </Card>\r\n      </FadeTransform>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction DishDetail(props) {\r\n  if (props.isLoading) {\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <Loading />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  else if (props.errMess) {\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <h4>{props.errMess}</h4>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  else if (props.dish != null) {\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <Breadcrumb>\r\n            <BreadcrumbItem><Link to=\"/menu\">Menu</Link></BreadcrumbItem>\r\n            <BreadcrumbItem active>{props.dish.name}</BreadcrumbItem>\r\n          </Breadcrumb>\r\n          <div className=\"col-12\">\r\n            <h3>{props.dish.name}</h3>\r\n            <hr />\r\n          </div>\r\n        </div>\r\n        <div className=\"row\">\r\n          <RenderDish dish={props.dish} />\r\n          <RenderComments comments={props.comments}\r\n            postComment={props.postComment}\r\n            dishId={props.dish.id} />\r\n        </div>\r\n\r\n      </div>\r\n    );\r\n  }\r\n  else {\r\n    return (\r\n      <div></div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DishDetail;","D:\\react\\confusion\\src\\components\\MainComponent.js",["122"],"D:\\react\\confusion\\src\\components\\HeaderComponent.js",[],"D:\\react\\confusion\\src\\components\\FooterComponent.js",[],"D:\\react\\confusion\\src\\components\\HomeComponent.js",[],"D:\\react\\confusion\\src\\components\\ContactComponent.js",["123","124","125","126","127","128","129","130"],"import React, { Component } from 'react';\r\nimport {\r\n    Breadcrumb, BreadcrumbItem,\r\n    Button, Label, Row, Col\r\n} from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { Control, Form, Errors, actions } from 'react-redux-form';\r\n\r\nlet required = (val) => val && val.length;\r\nlet maxLength = (len) => (val) => !(val) || (val.length <= len);\r\nlet minLength = (len) => (val) => (val) && (val.length >= len);\r\nlet isNumber = (val) => !isNaN(Number(val));\r\nlet validEmail = (val) => /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(val);\r\n\r\nclass Contact extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n\r\n    handleSubmit(values) {\r\n        // console.log('Current State is: ' + JSON.stringify(values));\r\n        // alert('Current State is: ' + JSON.stringify(values));\r\n        this.props.postFeedback( values.firstname, values.lastname, values.telnum, values.email, values.agree, values.contactType, values.message );\r\n        this.props.resetFeedbackForm();\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <Breadcrumb>\r\n                        <BreadcrumbItem><Link to=\"/home\">Home</Link></BreadcrumbItem>\r\n                        <BreadcrumbItem active>Contact Us</BreadcrumbItem>\r\n                    </Breadcrumb>\r\n                    <div className=\"col-12\">\r\n                        <h3>Contact Us</h3>\r\n                        <hr />\r\n                    </div>\r\n                </div>\r\n                <div className=\"row row-content\">\r\n                    <div className=\"col-12\">\r\n                        <h3>Location Information</h3>\r\n                    </div>\r\n                    <div className=\"col-12 col-sm-4 offset-sm-1\">\r\n                        <h5>Our Address</h5>\r\n                        <address>\r\n                            121, Clear Water Bay Road<br />\r\n                            Clear Water Bay, Kowloon<br />\r\n                            HONG KONG<br />\r\n                            <i className=\"fa fa-phone\"></i>: +852 1234 5678<br />\r\n                            <i className=\"fa fa-fax\"></i>: +852 8765 4321<br />\r\n                            <i className=\"fa fa-envelope\"></i>: <a href=\"mailto:confusion@food.net\">confusion@food.net</a>\r\n                        </address>\r\n                    </div>\r\n                    <div className=\"col-12 col-sm-6 offset-sm-1\">\r\n                        <h5>Map of our Location</h5>\r\n                    </div>\r\n                    <div className=\"col-12 col-sm-11 offset-sm-1\">\r\n                        <div className=\"btn-group\" role=\"group\">\r\n                            <a role=\"button\" className=\"btn btn-primary\" href=\"tel:+85212345678\"><i className=\"fa fa-phone\"></i> Call</a>\r\n                            <a role=\"button\" className=\"btn btn-info\"><i className=\"fa fa-skype\"></i> Skype</a>\r\n                            <a role=\"button\" className=\"btn btn-success\" href=\"mailto:confusion@food.net\"><i className=\"fa fa-envelope-o\"></i> Email</a>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row row-content\">\r\n                    <div className=\"col-12\">\r\n                        <h3>Send us your Feedback</h3>\r\n                    </div>\r\n                    <div className=\"col-12 col-md-9\">\r\n                        <Form model=\"feedback\" onSubmit={(values) => this.handleSubmit(values)}>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"firstname\" md={2}>First Name</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".firstname\" id=\"firstname\" name=\"firstname\"\r\n                                        placeholder=\"First Name\"\r\n                                        className=\"form-control\"\r\n                                        validators={{\r\n                                            required, minLength: minLength(3), maxLength: maxLength(15)\r\n                                        }}\r\n                                    />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".firstname\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: \"Required\",\r\n                                            minLength: \"Must be greater than 2 characters\",\r\n                                            maxLength: \"Must be 15 character or less\"\r\n                                        }}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"lastname\" md={2}>Last Name</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".lastname\" id=\"lastname\" name=\"lastname\"\r\n                                        placeholder=\"Last Name\"\r\n                                        className=\"form-control\"\r\n                                        validators={{\r\n                                            required, minLength: minLength(3), maxLength: maxLength(15)\r\n                                        }}\r\n                                    />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".lastname\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: \"Required\",\r\n                                            minLength: \"Must be greater than 2 characters\",\r\n                                            maxLength: \"Must be 15 character or less\"\r\n                                        }}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"telnum\" md={2}>Contact Tel.</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".telnum\" id=\"telnum\" name=\"telnum\"\r\n                                        placeholder=\"Tel. Number\"\r\n                                        className=\"form-control\"\r\n                                        validators={{\r\n                                            required, minLength: minLength(3), maxLength: maxLength(15), isNumber\r\n                                        }}\r\n                                    />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".telnum\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required',\r\n                                            minLength: 'Must be greater than 2 numbers',\r\n                                            maxLength: 'Must be 15 numbers or less',\r\n                                            isNumber: 'Must be a number'\r\n                                        }}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"email\" md={2}>Email</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".email\" id=\"email\" name=\"email\"\r\n                                        placeholder=\"Email\"\r\n                                        className=\"form-control\"\r\n                                        validators={{\r\n                                            required, validEmail\r\n                                        }}\r\n                                    />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".email\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required',\r\n                                            validEmail: 'Invalid Email Address'\r\n                                        }}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Col md={{ size: 6, offset: 2 }}>\r\n                                    <div className=\"form-check\">\r\n                                        <Label check>\r\n                                            <Control.checkbox model=\".agree\"\r\n                                                name=\"agree\"\r\n                                                className=\"form-check-input\" /> {' '}\r\n                                            <strong>May we contact you?</strong>\r\n                                        </Label>\r\n                                    </div>\r\n                                </Col>\r\n                                <Col md={{ size: 3, offset: 1 }}>\r\n                                    <Control.select model=\".contactType\" name=\"contactType\"\r\n                                        className=\"form-control\">\r\n                                        <option>Tel.</option>\r\n                                        <option>Email</option>\r\n                                    </Control.select>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"message\" md={2}>Your Feedback</Label>\r\n                                <Col md={10}>\r\n                                    <Control.textarea model=\".message\" id=\"message\" name=\"message\"\r\n                                        rows=\"12\"\r\n                                        className=\"form-control\" />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Col md={{ size: 10, offset: 2 }}>\r\n                                    <Button type=\"submit\" color=\"primary\">\r\n                                        Send Feedback\r\n                                    </Button>\r\n                                </Col>\r\n                            </Row>\r\n                        </Form>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Contact;","D:\\react\\confusion\\src\\shared\\leaders.js",[],["131","132"],"D:\\react\\confusion\\src\\shared\\promotions.js",[],["133","134"],"D:\\react\\confusion\\src\\components\\AboutComponent.js",["135"],"D:\\react\\confusion\\src\\redux\\configureStore.js",[],"D:\\react\\confusion\\src\\components\\CommentForm.js",["136","137","138"],"import React, { Component } from 'react';\r\nimport { Button, Modal, ModalHeader, ModalBody, Label, Row, Col } from 'reactstrap';\r\nimport { Control, LocalForm, Errors } from 'react-redux-form';\r\n\r\nconst required = (val) => val && val.length;\r\nconst maxLength = (len) => (val) => !(val) || (val.length <= len);\r\nconst minLength = (len) => (val) => (val) && (val.length >= len);\r\n\r\nclass CommentForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isModalOpen: false\r\n        };\r\n        this.toggleModal = this.toggleModal.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleSubmit(values) {\r\n        console.log('Current State is: ' + JSON.stringify(values));\r\n        alert('Current State is: ' + JSON.stringify(values));\r\n    }\r\n\r\n    toggleModal() {\r\n        this.setState({\r\n            isModalOpen: !this.state.isModalOpen\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <Button outline onClick={this.toggleModal}>\r\n                    <span className=\"fa fa-pencil fa-lg\"></span> Submit Comment\r\n                </Button>\r\n                <Modal isOpen={this.state.isModalOpen} toggle={this.toggleModal}>\r\n                    <ModalHeader toggle={this.toggleModal}>Submit Comment</ModalHeader>\r\n                    <ModalBody>\r\n                        <LocalForm onSubmit={(values) => this.handleSubmit(values)}>\r\n                            <Row class=\"form-group\">\r\n                                <Label htmlFor=\"rating\" md={12}>Rating</Label>\r\n                                <Col md={12}>\r\n                                    <Control.select model=\".rating\"\r\n                                        className=\"form-control\"\r\n                                        name=\"rating\">\r\n                                        <option>1</option>\r\n                                        <option>2</option>\r\n                                        <option>3</option>\r\n                                        <option>4</option>\r\n                                        <option>5</option>\r\n                                    </Control.select>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row class=\"form-group\">\r\n                                <Label htmlFor=\"name\" md={12}>Your Name</Label>\r\n                                <Col md={12}>\r\n                                    <Control.text model=\".name\" id=\"name\" name=\"name\"\r\n                                        placeholder=\"Your Name\"\r\n                                        className=\"form-control\"\r\n                                        validators={{\r\n                                            required, minLength: minLength(3), maxLength: maxLength(15)\r\n                                        }}\r\n                                    />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".name\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: \"Required\",\r\n                                            minLength: \"Must be greater than 2 characters\",\r\n                                            maxLength: \"Must be 15 character or less\"\r\n                                        }}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"comment\" md={12}>Comment</Label>\r\n                                <Col md={12}>\r\n                                    <Control.textarea model=\".comment\" id=\"comment\" name=\"comment\"\r\n                                        rows=\"6\"\r\n                                        className=\"form-control\" />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Col md={{ size: 12}}>\r\n                                    <Button type=\"submit\" color=\"primary\">\r\n                                        Submit\r\n                                    </Button>\r\n                                </Col>\r\n                            </Row>\r\n                        </LocalForm>\r\n                    </ModalBody>\r\n                </Modal>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\nexport default CommentForm;",["139","140"],"D:\\react\\confusion\\src\\redux\\dishes.js",[],"D:\\react\\confusion\\src\\redux\\leaders.js",[],"D:\\react\\confusion\\src\\redux\\promotions.js",[],"D:\\react\\confusion\\src\\redux\\comments.js",["141"],"import { actionTypes } from 'react-redux-form';\r\nimport { COMMENTS } from '../shared/comments';\r\nimport * as ActionTypes from './ActionTypes';\r\n\r\nexport const Comments = (state = COMMENTS, action) => {\r\n    switch (action.type) {\r\n        case ActionTypes.ADD_COMMENT:\r\n            var comment = action.payload;\r\n            comment.id = state.length;\r\n            comment.date = new Date().toISOString();\r\n            console.log(\"Comment: \", comment);\r\n            return state.concat(comment); \r\n        default:\r\n          return state;\r\n      }\r\n};","D:\\react\\confusion\\src\\shared\\comments.js",[],"D:\\react\\confusion\\src\\redux\\ActionCreators.js",[],"D:\\react\\confusion\\src\\redux\\ActionTypes.js",[],"D:\\react\\confusion\\src\\components\\LoadingComponent.js",[],"D:\\react\\confusion\\src\\redux\\forms.js",[],"D:\\react\\confusion\\src\\shared\\baseUrl.js",[],{"ruleId":"142","replacedBy":"143"},{"ruleId":"144","replacedBy":"145"},{"ruleId":"142","replacedBy":"146"},{"ruleId":"144","replacedBy":"147"},{"ruleId":"148","severity":1,"message":"149","line":47,"column":19,"nodeType":"150","endLine":49,"endColumn":35},{"ruleId":"148","severity":1,"message":"151","line":61,"column":19,"nodeType":"150","endLine":67,"endColumn":21},{"ruleId":"148","severity":1,"message":"152","line":83,"column":19,"nodeType":"150","endLine":85,"endColumn":48},{"ruleId":"153","severity":1,"message":"154","line":35,"column":3,"nodeType":"155","messageId":"156","endLine":37,"endColumn":4},{"ruleId":"157","severity":1,"message":"158","line":66,"column":29,"nodeType":"150","endLine":66,"endColumn":71},{"ruleId":"148","severity":1,"message":"151","line":80,"column":37,"nodeType":"150","endLine":86,"endColumn":39},{"ruleId":"148","severity":1,"message":"151","line":102,"column":37,"nodeType":"150","endLine":108,"endColumn":39},{"ruleId":"148","severity":1,"message":"151","line":124,"column":37,"nodeType":"150","endLine":130,"endColumn":39},{"ruleId":"148","severity":1,"message":"151","line":147,"column":37,"nodeType":"150","endLine":153,"endColumn":39},{"ruleId":"148","severity":1,"message":"159","line":169,"column":45,"nodeType":"150","endLine":171,"endColumn":80},{"ruleId":"148","severity":1,"message":"149","line":177,"column":37,"nodeType":"150","endLine":178,"endColumn":66},{"ruleId":"148","severity":1,"message":"152","line":187,"column":37,"nodeType":"150","endLine":189,"endColumn":68},{"ruleId":"142","replacedBy":"160"},{"ruleId":"144","replacedBy":"161"},{"ruleId":"142","replacedBy":"162"},{"ruleId":"144","replacedBy":"163"},{"ruleId":"164","severity":1,"message":"165","line":6,"column":10,"nodeType":"166","messageId":"167","endLine":6,"endColumn":23},{"ruleId":"148","severity":1,"message":"149","line":43,"column":37,"nodeType":"150","endLine":45,"endColumn":55},{"ruleId":"148","severity":1,"message":"151","line":57,"column":37,"nodeType":"150","endLine":63,"endColumn":39},{"ruleId":"148","severity":1,"message":"152","line":79,"column":37,"nodeType":"150","endLine":81,"endColumn":68},{"ruleId":"142","replacedBy":"168"},{"ruleId":"144","replacedBy":"169"},{"ruleId":"164","severity":1,"message":"170","line":1,"column":10,"nodeType":"166","messageId":"167","endLine":1,"endColumn":21},"no-native-reassign",["171"],"no-negated-in-lhs",["172"],["171"],["172"],"react/jsx-pascal-case","Imported JSX component select must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","Imported JSX component text must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component textarea must be in PascalCase or SCREAMING_SNAKE_CASE","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","Imported JSX component checkbox must be in PascalCase or SCREAMING_SNAKE_CASE",["171"],["172"],["171"],["172"],"no-unused-vars","'FadeTransform' is defined but never used.","Identifier","unusedVar",["171"],["172"],"'actionTypes' is defined but never used.","no-global-assign","no-unsafe-negation"]